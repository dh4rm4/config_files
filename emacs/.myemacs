;; require
(require 'cc-mode)
(require 'package)

;; Automatic indentation for c-modes (after pressing tab)
(define-key c-mode-base-map (kbd "RET") 'newline-and-indent)

;; Affiche les lignes et colonnes dans la barre du bas
;(line-number-mode 1)
;(column-number-mode 1)

;; Montre les parenthÃ¨ses
(show-paren-mode 1)
(set-face-background 'show-paren-match "green")
(set-face-foreground 'show-paren-match "grey")

;; Enleve automatiquement les espaces en fin de ligne des qu'on sauvegarde
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
(put 'scroll-left 'disabled nil)

;; Color settings to make Emacs look pretty
(set-foreground-color "#989898")
(set-face-foreground 'font-lock-comment-face "#2D8A2D")

;; Warning policy
(setq warning-minimum-level :emergency)

;; Melpa installer
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))

;; Auto-completion
;(ac-config-default)

;; Google Trad
;(setq google-translate-translation-directions-alist '(("fr" . "en")))

;; Auto Update Package
;(auto-package-update-at-time "16:20")

;; Set default font
(set-face-attribute 'default nil
					:family "Source Code Pro"
					:height 110
					:weight 'normal
                    :width 'normal)

;; enable clipboard in emacs
(setq x-select-enable-clipboard t)

;; add space after linum
(setq linum-format "%d ")


;; csv formatage
(defun org-convert-csv-table (beg end)
  (interactive (list (point) (mark)))
  (replace-string "\\(^\\)\\|\\(\".*?\"\\)\\|,")
  nil  beg end)

(require 's) ;; M-x package-install <RETURN> s <RETURN>


(defun markdown--csv-to-table (csv)
  ;;Turn a CSV into a markdown table.
  (string-join ;; this will happen last, join everything up and return it to the caller.
   (mapcar ;; walk through the lines in the CSV selection.
	(lambda (line) ;; in each line...
	  (setq line (format "| %s |" line)) ;; place | pipes at the start and end of the line.
	  (s-replace "," " | " line)) ;; replace commas with | pipes
	(split-string (s-chomp csv) "\n")) "\n")) ;; This is acutally happening at the start, we split CSV at newlines

(defun markdown-csv-to-table (begin end)
  (interactive "r") ;; get the region using the (interactive) macro.
  (unless (region-active-p) ;; Abort when there's no region selected.
	(error "csv text region must be selected"))
  (let ((table (markdown--csv-to-table (buffer-substring begin end)))) ;; use the function above to make the actual table
	(save-excursion ;; return to the same position after running the next command...
	  (delete-region begin end)) ;; delete the original text
	(insert table))) ;; insert the markdown table


(add-to-list 'load-path "~/home/kboddez/.emacs.d/elpa/dockerfile-mode/dockerfile-mode.el")
(load "dockerfile-mode")
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
